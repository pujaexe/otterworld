// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jqHMejC8dcPyddaS4gmqUt
// Component: 8uRuDIsw_Axd

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import Card from "../../Card"; // plasmic-import: -OeynXv3MoWt/component

import { useScreenVariants as useScreenVariantsv6JzT4AzP0Fn } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: v6jzT4azP0Fn/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: jqHMejC8dcPyddaS4gmqUt/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: 8uRuDIsw_Axd/css

import Twitter2SvgrepoComsvgIcon from "./icons/PlasmicIcon__Twitter2SvgrepoComsvg"; // plasmic-import: cV4cuMllBGg8/icon
import TelegramSvgrepoComsvgIcon from "./icons/PlasmicIcon__TelegramSvgrepoComsvg"; // plasmic-import: p8ya4hJMYEbR/icon
import GitbookSvgrepoComsvgIcon from "./icons/PlasmicIcon__GitbookSvgrepoComsvg"; // plasmic-import: 5vLE0s1yfrCg/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  navigationBar?: Flex__<typeof NavigationBar>;
  section?: Flex__<"section">;
  freeBox?: Flex__<"div">;
  h1?: Flex__<"h1">;
  dd?: Flex__<"dd">;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsv6JzT4AzP0Fn()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <NavigationBar
            data-plasmic-name={"navigationBar"}
            data-plasmic-override={overrides.navigationBar}
            brand={
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__kugtq
                )}
                component={Link}
                href={"#"}
                platform={"nextjs"}
              >
                <PlasmicImg__
                  alt={"otter logo"}
                  className={classNames(sty.img__z2Kzs)}
                  displayHeight={"40px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={{
                    src: "/plasmic/website_starter/images/group41Png.png",
                    fullWidth: 1302,
                    fullHeight: 315,
                    aspectRatio: undefined
                  }}
                />
              </PlasmicLink__>
            }
            className={classNames("__wab_instance", sty.navigationBar)}
            closeButton={
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img___8AfW)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={"https://static1.plasmic.app/close.svg"}
              />
            }
            itemsGap={24}
            menuItems={
              <React.Fragment>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__sW0DJ
                  )}
                  component={Link}
                  href={"/"}
                  platform={"nextjs"}
                >
                  <Twitter2SvgrepoComsvgIcon
                    className={classNames(projectcss.all, sty.svg__upSgn)}
                    role={"img"}
                  />
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link___8Q603
                  )}
                  component={Link}
                  href={"/"}
                  platform={"nextjs"}
                >
                  <TelegramSvgrepoComsvgIcon
                    className={classNames(projectcss.all, sty.svg__fSkf4)}
                    role={"img"}
                  />
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__aAOl2
                  )}
                  component={Link}
                  href={"/"}
                  platform={"nextjs"}
                >
                  <GitbookSvgrepoComsvgIcon
                    className={classNames(projectcss.all, sty.svg__ztyoT)}
                    role={"img"}
                  />
                </PlasmicLink__>
              </React.Fragment>
            }
            openButton={
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img___2Ee0E)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={"https://static1.plasmic.app/menu.svg"}
              />
            }
            responsiveBreakpoint={768}
          />

          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__rtIc8)}
              displayHeight={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "400px"
                  : "auto"
              }
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "400px"
                  : "600px"
              }
              loading={"lazy"}
              src={{
                src: "/plasmic/website_starter/images/otterCharpng.png",
                fullWidth: 1080,
                fullHeight: 1080,
                aspectRatio: undefined
              }}
            />

            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(projectcss.all, sty.freeBox)}
            />

            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns___5DPkq)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.column__vFy0C)}
              >
                <h1
                  data-plasmic-name={"h1"}
                  data-plasmic-override={overrides.h1}
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1
                  )}
                >
                  {"Welcome to the Otter World"}
                </h1>
                <dd
                  data-plasmic-name={"dd"}
                  data-plasmic-override={overrides.dd}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.dd
                  )}
                >
                  {
                    "the future of decentralized finance (DeFi) where innovation meets security."
                  }
                </dd>
              </Stack__>
              <div className={classNames(projectcss.all, sty.column__wIr54)}>
                <div className={classNames(projectcss.all, sty.columns__f1Zbp)}>
                  <div
                    className={classNames(projectcss.all, sty.column__kw3IK)}
                  >
                    <Card
                      className={classNames("__wab_instance", sty.card__fgMeI)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__hFG)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"100%"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/website_starter/images/image1Editpng.png",
                          fullWidth: 1024,
                          fullHeight: 1024,
                          aspectRatio: undefined
                        }}
                      />
                    </Card>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__dQi3H)}
                  >
                    <Card
                      className={classNames("__wab_instance", sty.card__jkmhN)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__yf6Jv)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"100%"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/website_starter/images/image2Editpng.png",
                          fullWidth: 1024,
                          fullHeight: 1024,
                          aspectRatio: undefined
                        }}
                      />
                    </Card>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__fBvmW)}
                  >
                    <Card
                      className={classNames("__wab_instance", sty.card__zK4CT)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__bmRUx)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"100%"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/website_starter/images/image3Editpng.png",
                          fullWidth: 1024,
                          fullHeight: 1024,
                          aspectRatio: undefined
                        }}
                      />
                    </Card>
                  </div>
                </div>
              </div>
            </Stack__>
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navigationBar", "section", "freeBox", "h1", "dd"],
  navigationBar: ["navigationBar"],
  section: ["section", "freeBox", "h1", "dd"],
  freeBox: ["freeBox"],
  h1: ["h1"],
  dd: ["dd"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navigationBar: typeof NavigationBar;
  section: "section";
  freeBox: "div";
  h1: "h1";
  dd: "dd";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navigationBar: makeNodeComponent("navigationBar"),
    section: makeNodeComponent("section"),
    freeBox: makeNodeComponent("freeBox"),
    h1: makeNodeComponent("h1"),
    dd: makeNodeComponent("dd"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
